@page "/Form"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JsInterop

@using TelerikBlazorApp1FormsAndTileLayout.Models

<div class="container-fluid">
	<div class='row my-4'>
		<div class='col-12 col-lg-9 border-right'>
			<div class="row example-wrapper">
				<EditForm Model="@person" OnValidSubmit="@HandleValidSubmit" class="k-form">
					<DataAnnotationsValidator />
					<fieldset>
						<legend>User Details</legend>

						<div class="form-group">
							<label for="FNameTb">
								<span>First Name <span class="k-required">*</span></span>
							</label>
							<TelerikTextBox @bind-Value="@person.FirstName" Width="100%" Id="FNameTb" />
						</div>
						<div class="form-group">
							<label for="LNameTb">
								<span>Last Name <span class="k-required">*</span></span>
							</label>
							<TelerikTextBox @bind-Value="@person.LastName" Width="100%" Id="LNameTb" />
						</div>
						<div class="form-group">
							<label for="GenderDDL">
								<span>Gender <span class="k-field-info">optional</span></span>
							</label>
							<TelerikDropDownList @bind-Value="@person.Gender" DefaultText="Select gender"
												 Data="@genders" TextField="Text" ValueField="Id"
												 Width="100%" Id="GenderDDL">
								<DropDownListSettings>
									<DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
								</DropDownListSettings>
							</TelerikDropDownList>
						</div>
						<div class="form-group">
							<label for="EmailTb">
								<span>Email <span class="k-required">*</span></span>
							</label>
							<TelerikTextBox @bind-Value="@person.Email" Width="100%" Id="EmailTb" />
						</div>
					</fieldset>

					<fieldset>
						<legend>Team Preferences</legend>
						<div class="form-group">
							<label for="StartDateDP">
								<span>Start date <span class="k-required">*</span></span>
							</label>
							<TelerikDatePicker @bind-Value="@person.StartDate" Width="100%" Id="StartDateDP" />
						</div>
						<div class="form-group">
							<label for="TeamDDL">
								<span>Preferred Team <span class="k-required">*</span></span>
							</label>
							<TelerikDropDownList @bind-Value="@person.PreferredTeam"
												 DefaultText="Preferred team" Id="TeamDDL"
												 Data="@Teams" Width="100%">
							</TelerikDropDownList>
						</div>
					</fieldset>

					<ValidationSummary />

					@if (ShowSuccessMessage)
					{
						<div class="alert alert-info">
							Application form submitted Successfully, we will get back to you
						</div>
					}

					<div class="text-right">
						<TelerikButton ButtonType="@ButtonType.Button" OnClick="@CancelForm">Cancel</TelerikButton>
						<TelerikButton ButtonType="@ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Submit</TelerikButton>
					</div>
				</EditForm>
			</div>

		</div>
		<div class='col-12 col-lg-3 mt-3 mt-lg-0'>
			<h3>Telerik UI for Blazor Form</h3>
			<p>Telerik UI for Blazor provides comprehensive support for building forms.</p>

			<p>
				For more information on implementing validation and labels, refer to the article
				on <a href="https://docs.telerik.com/blazor-ui/common-features/input-validation" target="_blank">
					Input Validation support by Telerik UI for Blazor
				</a>.
			</p>
		</div>
	</div>





	<TelerikButton OnClick="@SaveState" Icon="@FontIcon.Save" Class="mr-sm">Save State</TelerikButton>
	<TelerikButton OnClick="@ReloadPage" Icon="@FontIcon.ArrowRotateCw" Class="mr-sm">Reload the page</TelerikButton>
	<TelerikButton OnClick="@LoadState" Icon="@FontIcon.Download" Class="mr-sm">Load last State</TelerikButton>
	<TelerikButton OnClick="@SetExplicitState" Icon="@FontIcon.Gear" Class="mr-sm">Configure State</TelerikButton>

	<TelerikTileLayout @ref="@TileLayoutInstance"
					   Columns="3"
					   Resizable="true"
					   Reorderable="true">
		<TileLayoutItems>
			<TileLayoutItem HeaderText="Panel 1"></TileLayoutItem>
			<TileLayoutItem HeaderText="Panel 2"></TileLayoutItem>
			<TileLayoutItem HeaderText="Panel 3" RowSpan="2">
				<Content>The tiles in this demo have little content intentionally so you can focus on the state. You can put any content and components in them.</Content>
			</TileLayoutItem>
			<TileLayoutItem HeaderText="Panel 4" ColSpan="2" RowSpan="2">
				<Content>Try resizing and moving me around, for example, then click the buttons above.</Content>
			</TileLayoutItem>
			<TileLayoutItem HeaderText="Panel 5"></TileLayoutItem>
		</TileLayoutItems>
	</TelerikTileLayout>


	@code {
		TelerikTileLayout TileLayoutInstance { get; set; }
		TileLayoutState SavedState { get; set; }

		string stateStorageKey = "TelerikBlazorTileLayoutStateDocsKey";

		async Task SaveState()
		{
			// Get state through the GetState method
			var state = TileLayoutInstance.GetState();

			await LocalStorage.SetItemAsync(stateStorageKey, state);
		}

		async Task LoadState()
		{
			TileLayoutState storedState = await LocalStorage.GetItemAsync<TileLayoutState>(stateStorageKey);

			if (storedState != null)
			{
				// Set State through the SetState method
				TileLayoutInstance.SetState(storedState);
			}
		}

		void ReloadPage()
		{
			JsInterop.InvokeVoidAsync("window.location.reload");
		}

		async void SetExplicitState()
		{
			await LocalStorage.RemoveItemAsync(stateStorageKey);
			TileLayoutState desiredState = GetDefaultDemoState();

			// set state through the SetState method
			TileLayoutInstance.SetState(desiredState);
		}

		// Loading state when the component renders
		protected override async Task OnAfterRenderAsync(bool firstRender)
		{
			var state = await LocalStorage.GetItemAsync<TileLayoutState>(stateStorageKey);
			if (state != null && TileLayoutInstance != null)
			{
				TileLayoutInstance.SetState(state);
			}
		}

		TileLayoutState GetDefaultDemoState()
		{
			// Sample state object you can use as reference
			TileLayoutState defaultDemoState = new TileLayoutState()
			{
				ItemStates = new List<TileLayoutItemState>()
	{
	new TileLayoutItemState { Order = 1, ColSpan = 1, RowSpan = 1 },
	new TileLayoutItemState { Order = 2, ColSpan = 1, RowSpan = 1 },
	new TileLayoutItemState { Order = 3, ColSpan = 1, RowSpan = 2 },
	new TileLayoutItemState { Order = 4, ColSpan = 2, RowSpan = 2 },
	new TileLayoutItemState { Order = 5, ColSpan = 1, RowSpan = 1 },
	}
			};
			return defaultDemoState;
		}
	}

	<TelerikButton OnClick="@GetTileLayoutState">TileLayout State</TelerikButton>

	@code {

		[CascadingParameter]
		public DialogFactory Dialogs { get; set; }

		TelerikTileLayout TileLayoutRef { get; set; }

		async Task GetTileLayoutState()
		{
			var tileState = TileLayoutRef.GetState();
			Dialogs.AlertAsync(tileState.ToString(), "GetState!");
		}
	}

	<TelerikTileLayout Columns="3"
					   RowHeight="150px"
					   Resizable="true"
					   Reorderable="true" @ref="@TileLayoutRef">
		<TileLayoutItems>
			<TileLayoutItem HeaderText="Active Members">
				<Content>TODO: Send e-mail for all active members from May 2023.</Content>
			</TileLayoutItem>
			<TileLayoutItem HeaderText="Business Account">
				<Content>Review all payments for May 2023.</Content>
			</TileLayoutItem>
			<TileLayoutItem HeaderText="Production" RowSpan="3">
				<Content>Prepare packs to send to customers for June 2023</Content>
			</TileLayoutItem>
			<TileLayoutItem HeaderText="Invoices" RowSpan="2" ColSpan="2">
				<Content>Send invoices to customers.</Content>
			</TileLayoutItem>
		</TileLayoutItems>
	</TelerikTileLayout>


</div>

@code {
	Person person { get; set; }
	bool ShowSuccessMessage { get; set; }

	protected override Task OnInitializedAsync()
	{
		GetDefaultPerson();

		return base.OnInitializedAsync();
	}

	async void HandleValidSubmit()
	{
		// implement actual data storage here
		ShowSuccessMessage = true;
		await Task.Delay(2000);
		ShowSuccessMessage = false;
		GetDefaultPerson();
		StateHasChanged();
	}

	void CancelForm()
	{
		GetDefaultPerson();
	}

	void GetDefaultPerson()
	{
		// in reality you may be pulling data from a service or authentication logic
		// not only for the form model, but also for the data sources below
		person = new Person()
			{
				StartDate = DateTime.Now.AddDays(7)
			};
	}

	IEnumerable<DropDownModel> genders = new List<DropDownModel>
	{
		new DropDownModel {Text = "female", Id = 1},
		new DropDownModel {Text = "male", Id = 2},
		new DropDownModel {Text = "other", Id = 3},
		new DropDownModel {Text = "I'd rather not say", Id = 4}
	};

	List<string> Teams = new List<string>
	{
		"Blazor", "Python", "Ruby", "Java", "JavaScript", "Assembler"
	};
}